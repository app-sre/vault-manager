#!/bin/bash

source .env

export PODMAN_IGNORE_CGROUPSV1_WARNING=1

export PRIMARY_VAULT_URL="http://primary-vault:8200"
export SECONDARY_VAULT_URL="http://secondary-vault:8202"
export KEYCLOAK_URL="http://keycloak:8180"
export GRAPHQL_SERVER="http://qontract-server:4000/graphql"

wait_for_services() {
    echo "Waiting for all dependencies to be ready..."
    for url in "$KEYCLOAK_URL/realms/master" \
               "http://qontract-server:4000/healthz" \
               "$PRIMARY_VAULT_URL/v1/sys/health" \
               "$SECONDARY_VAULT_URL/v1/sys/health"; do
        until curl -s -f -o /dev/null "$url"; do
            echo "Waiting for $url..."
            sleep 5
        done
    done
    echo "All dependencies are ready."
}

wait_for_services

# populate necessary vault access vars to primary
vault kv put -address="${PRIMARY_VAULT_URL}" -mount=secret master rootToken=root
vault kv put -address="${PRIMARY_VAULT_URL}" -mount=secret oidc client-secret=my-special-client-secret
vault kv put -address="${PRIMARY_VAULT_URL}" -mount=secret kubernetes cert=very-valid-cert

# populate oidc client secret in secondary
vault kv put -address="${SECONDARY_VAULT_URL}" -mount=secret oidc client-secret=my-special-client-secret
vault kv put -address="${SECONDARY_VAULT_URL}" -mount=secret kubernetes cert=very-valid-cert

# run test suite
for test in $(find /tests/bats/ -type f | grep .bats | grep -v roles | grep -v entities | grep -v groups | grep -v errors); do
    echo "running $test"
    bats --tap "$test"
    # hack so flags.bats has clean slate for audit resources when testing
    if [[ $test == "/tests/bats/audit/audit-devices.bats" ]]; then
        # need to execute this for both instances
        vault audit disable -address=${PRIMARY_VAULT_URL} file
        vault audit disable -address=${SECONDARY_VAULT_URL} file
    fi
done

# roles is dependent on secret engines being enabled due to credential output
echo "running bats/roles/roles.bats"
bats --tap /tests/bats/roles/roles.bats

# entities is dependent on config generated by other tests
echo "running bats/entities/entities.bats"
bats --tap /tests/bats/entities/entities.bats

# groups is dependent on entities
echo "running bats/groups/groups.bats"
bats --tap /tests/bats/groups/groups.bats

# run error handling test now that vaults are fully configured
echo "running bats/errors/errors.bats"
bats --tap /tests/bats/errors/errors.bats
