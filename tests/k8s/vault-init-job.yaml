---
apiVersion: batch/v1
kind: Job
metadata:
  name: vault-init
  labels:
    app: vault-init
spec:
  backoffLimit: 3
  template:
    metadata:
      labels:
        app: vault-init
    spec:
      restartPolicy: Never
      containers:
      - name: vault-init
        image: hashicorp/vault:1.17.1
        env:
        - name: VAULT_TOKEN
          value: root
        - name: PRIMARY_VAULT_URL
          value: http://primary-vault:8200
        - name: SECONDARY_VAULT_URL
          value: http://secondary-vault:8202
        command: ["/bin/sh", "-c"]
        args:
        - |
          set -e
          echo "Initializing Vault secrets..."

          # Wait for vaults to be available
          until vault status -address="${PRIMARY_VAULT_URL}" > /dev/null 2>&1; do
            echo "Waiting for primary vault..."
            sleep 2
          done

          until vault status -address="${SECONDARY_VAULT_URL}" > /dev/null 2>&1; do
            echo "Waiting for secondary vault..."
            sleep 2
          done

          # Generate a dummy CA certificate for testing
          CA_CERT="-----BEGIN CERTIFICATE-----
          MIIDQTCCAimgAwIBAgITBmyfz5m/jAo54vB4ikPmljZbyjANBgkqhkiG9w0BAQsF
          ADA5MQswCQYDVQQGEwJVUzEPMA0GA1UEChMGQW1hem9uMRkwFwYDVQQDExBBbWF6
          b24gUm9vdCBDQSAxMB4XDTE1MDUyNjAwMDAwMFoXDTM4MDExNzAwMDAwMFowOTEL
          MAkGA1UEBhMCVVMxDzANBgNVBAoTBkFtYXpvbjEZMBcGA1UEAxMQQW1hem9uIFJv
          b3QgQ0EgMTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBALJ4gHHKeNXj
          ca9HgFB0fW7Y14h29Jlo91ghYPl0hAEvrAIthtOgQ3pOsqTQNroBvo3bSMgHFzZM
          9O6II8c+6zf1tRn4SWiw3te5djgdYZ6k/oI2peVKVuRF4fn9tBb6dNqcmzU5L/qw
          IFAGbHrQgLKm+a/sRxmPUDgH3KKHOVj4utWp+UhnMJbulHheb4mjUcAwhmahRWa6
          VOujw5H5SNz/0egwLX0tdHA114gk957EWW67c4cX8jJGKLhD+rcdqsq08p8kDi1L
          93FcXmn/6pUCyziKrlA4b9v7LWIbxcceVOF34GfID5yHI9Y/QCB/IIDEgEw+OyQm
          jgSubJrIqg0CAwEAAaNCMEAwDwYDVR0TAQH/BAUwAwEB/zAOBgNVHQ8BAf8EBAMC
          AYYwHQYDVR0OBBYEFIQYzIU07LwMlJQuCFmcx7IQTgoIMA0GCSqGSIb3DQEBCwUA
          A4IBAQCY8jdaQZChGsV2USggNiMOruYou6r4lK5IpDB/G/wkjUu0yKGX9rbxenDI
          U5PMCCjjmCXPI6T53iHTfIUJrU6adTrCC2qJeHZERxhlbI1Bjjt/msv0tadQ1wUs
          N+gDS63pYaACbvXy8MWy7Vu33PqUXHeeE6V/Uq2V8viTO96LXFvKWlJbYK8U90vv
          o/ufQJVtMVT8QtPHRh8jrdkPSHCa2XV4cdFyQzR1bldZwgJcJmApzyMZFo6IQ6XU
          5MsI+yMRQ+hDKXJioaldXgjUkK642M4UwtBV8ob2xJNDd2ZhwLnoQdeXeGADbkpy
          rqXRfboQnoZsG4q5WTP468SQvvG5
          -----END CERTIFICATE-----"

          # Populate necessary vault access vars to primary
          vault kv put -address="${PRIMARY_VAULT_URL}" -mount=secret master rootToken=root
          vault kv put -address="${PRIMARY_VAULT_URL}" -mount=secret secondary root=root
          vault kv put -address="${PRIMARY_VAULT_URL}" -mount=secret oidc client-secret=my-special-client-secret
          vault kv put -address="${PRIMARY_VAULT_URL}" -mount=secret kubernetes cert="${CA_CERT}"

          # Populate oidc client secret in secondary
          vault kv put -address="${SECONDARY_VAULT_URL}" -mount=secret oidc client-secret=my-special-client-secret
          vault kv put -address="${SECONDARY_VAULT_URL}" -mount=secret kubernetes cert="${CA_CERT}"

          echo "Vault initialization complete!"
